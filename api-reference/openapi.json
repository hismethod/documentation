{
  "openapi": "3.0.0",
  "paths": {
    "/v1/verifications": {
      "post": {
        "operationId": "VerificationController_createVerification",
        "summary": "Create a new verification session",
        "description": "Initiates a new identity verification session with the specified eID provider. Supports PKCE (RFC 7636) for enhanced security with public clients.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestDto"
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "201": {
            "description": "Verification session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid eID or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": {
                      "code": "invalid_eid",
                      "message": "The specified eID 'invalid_eid' is not supported"
                    },
                    "request_id": "req_1234567890abcdef"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid client credentials"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Verifications"
        ],
        "security": [
          {
            "basic-auth": []
          }
        ]
      }
    },
    "/v1/verifications/{verificationId}": {
      "get": {
        "operationId": "VerificationController_getVerification",
        "summary": "Get verification status",
        "description": "Retrieves the current status and result of a verification session",
        "parameters": [
          {
            "name": "verificationId",
            "required": true,
            "in": "path",
            "description": "Unique verification identifier",
            "schema": {
              "example": "1234567890abcdef",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVerificationResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid client credentials"
          },
          "404": {
            "description": "Verification not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": {
                      "code": "verification_not_found",
                      "message": "Verification not found",
                      "details": {
                        "verificationId": "1234567890abcdef",
                        "clientId": "client_abc123",
                        "hint": "Check that the verification ID is correct and belongs to your client"
                      }
                    },
                    "request_id": "req_1234567890abcdef"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Verifications"
        ],
        "security": [
          {
            "basic-auth": []
          }
        ]
      },
      "delete": {
        "operationId": "VerificationController_deleteVerification",
        "summary": "Delete verification session",
        "description": "Cancels and deletes an ongoing verification session",
        "parameters": [
          {
            "name": "verificationId",
            "required": true,
            "in": "path",
            "description": "Unique verification identifier",
            "schema": {
              "example": "1234567890abcdef",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Verification cancelled and deleted successfully"
          },
          "400": {
            "description": "Bad request - cannot cancel verification in current status",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": {
                      "code": "invalid_status_transition",
                      "message": "Cannot cancel verification in 'completed' status",
                      "details": {
                        "currentStatus": "completed",
                        "verificationId": "1234567890abcdef",
                        "allowed_statuses": [
                          "initiated",
                          "pending"
                        ],
                        "hint": "Verification can only be cancelled if it is in initiated or pending status"
                      }
                    },
                    "request_id": "req_1234567890abcdef"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid client credentials"
          },
          "404": {
            "description": "Verification not found"
          }
        },
        "tags": [
          "Verifications"
        ],
        "security": [
          {
            "basic-auth": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_getHealth",
        "summary": "Check API health",
        "description": "Returns the current health status of the API and its dependencies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ok",
                    "timestamp": "2025-01-01T12:00:00.000Z",
                    "uptime": 3600,
                    "version": "1.0.0",
                    "services": {
                      "database": "connected",
                      "cache": "connected"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "API is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "error",
                    "timestamp": "2025-01-01T12:00:00.000Z",
                    "uptime": 3600,
                    "version": "1.0.0",
                    "services": {
                      "database": "disconnected",
                      "cache": "connected"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/health/ready": {
      "get": {
        "operationId": "HealthController_getReadiness",
        "summary": "Check API readiness",
        "description": "Returns whether the API is ready to serve requests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API is ready",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "status": "ready",
                    "timestamp": "2025-01-01T12:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "Identity Gateway API",
    "description": "\n# Identity Gateway API\n\nThe Identity Gateway provides a unified Identity Verification API for electronic identity verification across multiple eID providers.\n\n## Authentication\n\nPublic API endpoints require Basic Authentication:\n- **Authorization**: Basic base64(clientId:clientSecret)\n\n## Supported eID Providers\n\n- **MitID** (Denmark) - Redirect flow\n- **BankID SE** (Sweden) - QR code flow  \n- **Norwegian BankID** (Norway) - Redirect flow\n- **iDIN** (Netherlands) - Redirect flow\n- **FinTN** (Finland) - Redirect flow\n- **Evrotrust** (Bulgaria) - QR code flow\n- **SmartID** (Baltics) - QR code flow\n- **AusweisApp** (Germany) - Redirect flow\n\n## Webhook Events\n\nConfigure webhook URLs to receive real-time notifications:\n- `verification.initiated` - Verification session started\n- `verification.pending` - User interaction required\n- `verification.completed` - Verification successful\n- `verification.failed` - Verification failed\n- `verification.expired` - Session expired\n- `verification.cancelled` - User cancelled\n\n## Error Handling\n\nAll errors follow a consistent structure with specific error codes and helpful details.\n    ",
    "version": "1.0.0",
    "contact": {
      "name": "hConnect Support",
      "url": "https://www.hopae.com",
      "email": "dev@hopae.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Verifications",
      "description": "Identity verification endpoints"
    },
    {
      "name": "Health",
      "description": "Service health and status endpoints"
    }
  ],
  "servers": [
    {
      "url": "https://api-gw.hopae.com",
      "description": "Production"
    },
    {
      "url": "https://api-gw.test.hopae.com",
      "description": "Test"
    },
    {
      "url": "http://localhost:8000",
      "description": "Development"
    }
  ],
  "components": {
    "securitySchemes": {
      "basic-auth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic authentication using clientId:clientSecret"
      },
      "ClientId": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Client-ID",
        "description": "Client identifier for internal API access only"
      },
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "in": "header",
        "description": "JWT token for console authentication"
      }
    },
    "schemas": {
      "AuthenticationHint": {
        "type": "object",
        "properties": {
          "personalNumber": {
            "type": "string",
            "description": "Swedish personal number (BankID)"
          },
          "cprNumber": {
            "type": "string",
            "description": "Danish CPR number (MitID)"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number (itsme, UAE Pass)"
          },
          "nric": {
            "type": "string",
            "description": "Singapore NRIC (Singpass)"
          },
          "emiratesId": {
            "type": "string",
            "description": "UAE Emirates ID"
          },
          "documentNumber": {
            "type": "string",
            "description": "Document number (mDL)"
          },
          "mobileNumber": {
            "type": "string",
            "description": "Alternative mobile number"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          }
        }
      },
      "ReturnContext": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "State parameter for session binding"
          }
        },
        "required": [
          "state"
        ]
      },
      "UICustomization": {
        "type": "object",
        "properties": {
          "colorScheme": {
            "type": "string",
            "description": "Color scheme"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo URL"
          },
          "theme": {
            "type": "string",
            "description": "Theme",
            "enum": [
              "light",
              "dark"
            ]
          }
        }
      },
      "CreateVerificationRequestDto": {
        "type": "object",
        "properties": {
          "eid": {
            "type": "string",
            "description": "Identity provider",
            "example": "bankidse"
          },
          "redirectUri": {
            "type": "string",
            "description": "URL to redirect after verification",
            "example": "https://example.com/callback"
          },
          "webhookUrl": {
            "type": "string",
            "description": "Webhook URL for async notifications",
            "example": "https://example.com/webhook"
          },
          "loaRequired": {
            "type": "string",
            "description": "Required Level of Assurance",
            "enum": [
              "1",
              "2",
              "3",
              "4"
            ],
            "example": "3"
          },
          "requestedAttributes": {
            "description": "Attributes to request from provider",
            "example": [
              "given_name",
              "family_name",
              "birthdate"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of verification",
            "example": "account_opening"
          },
          "referenceId": {
            "type": "string",
            "description": "Your internal reference ID",
            "example": "ORDER-2024-12345"
          },
          "locale": {
            "type": "string",
            "description": "Locale for user interface",
            "example": "en, en-US"
          },
          "metadata": {
            "type": "object",
            "description": "Custom metadata"
          },
          "userData": {
            "description": "User data for identity provider authentication",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationHint"
              }
            ]
          },
          "initiationMethod": {
            "type": "string",
            "description": "Initiation method preference",
            "enum": [
              "auto",
              "qrOnly",
              "appOnly"
            ]
          },
          "flow": {
            "type": "string",
            "description": "Preferred verification flow",
            "enum": [
              "push",
              "qr",
              "redirect"
            ]
          },
          "returnContext": {
            "description": "Return context configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnContext"
              }
            ]
          },
          "uiCustomization": {
            "description": "UI customization options",
            "allOf": [
              {
                "$ref": "#/components/schemas/UICustomization"
              }
            ]
          },
          "codeChallenge": {
            "type": "string",
            "description": "PKCE code challenge for OAuth2/OIDC flows",
            "example": "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
          },
          "codeChallengeMethod": {
            "type": "string",
            "description": "PKCE code challenge method",
            "enum": [
              "S256",
              "plain"
            ],
            "example": "S256"
          }
        },
        "required": [
          "eid",
          "loaRequired",
          "purpose"
        ]
      },
      "flowDetails": {
        "type": "object",
        "properties": {
          "qrData": {
            "type": "string",
            "description": "QR code data"
          },
          "authorizationUrl": {
            "type": "string",
            "description": "Authorization URL for redirect flow"
          },
          "autoStartToken": {
            "type": "string",
            "description": "Auto-start token"
          },
          "message": {
            "type": "string",
            "description": "Message displayed to user"
          },
          "hintProvided": {
            "type": "object",
            "description": "Authentication hint provided"
          },
          "state": {
            "type": "string",
            "description": "State parameter for CSRF protection"
          },
          "sessionData": {
            "type": "object",
            "description": "Session data"
          },
          "pushReference": {
            "type": "string",
            "description": "Push notification reference"
          },
          "hintAccepted": {
            "type": "boolean",
            "description": "Whether hint was accepted by provider"
          },
          "maskedIdentifier": {
            "type": "string",
            "description": "Masked user identifier"
          },
          "messageDisplayed": {
            "type": "string",
            "description": "Message displayed to user"
          },
          "displayInstructions": {
            "type": "object",
            "description": "Localized display instructions"
          }
        }
      },
      "PollingInfo": {
        "type": "object",
        "properties": {
          "recommendedInterval": {
            "type": "number",
            "description": "Recommended polling interval in milliseconds"
          },
          "maxDuration": {
            "type": "number",
            "description": "Maximum polling duration in milliseconds"
          }
        },
        "required": [
          "recommendedInterval"
        ]
      },
      "ProviderInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider display name"
          },
          "transactionId": {
            "type": "string",
            "description": "Provider transaction ID"
          },
          "requirements": {
            "type": "object",
            "description": "Provider requirements"
          }
        }
      },
      "RedirectBehavior": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "HTTP redirect method"
          },
          "target": {
            "type": "string",
            "description": "Target window",
            "enum": [
              "_self",
              "_blank"
            ]
          },
          "mobileBehavior": {
            "type": "string",
            "description": "Mobile behavior"
          }
        },
        "required": [
          "method",
          "target",
          "mobileBehavior"
        ]
      },
      "UserConfirmation": {
        "type": "object",
        "properties": {
          "confirmedIdentity": {
            "type": "object",
            "description": "Identity confirmation status"
          }
        },
        "required": [
          "confirmedIdentity"
        ]
      },
      "CreateVerificationResponseDto": {
        "type": "object",
        "properties": {
          "verificationId": {
            "type": "string",
            "description": "Unique verification ID",
            "example": "ver_2hJ8kL9mN3pQ5rS7"
          },
          "status": {
            "type": "string",
            "description": "Current verification status",
            "enum": [
              "initiated",
              "pending",
              "authenticating",
              "processing",
              "completed",
              "failed",
              "expired",
              "cancelled"
            ]
          },
          "eid": {
            "type": "string",
            "description": "Identity provider used"
          },
          "flow": {
            "type": "string",
            "description": "Verification flow type",
            "enum": [
              "push",
              "qr",
              "redirect"
            ]
          },
          "flowDetails": {
            "description": "Initiation details",
            "allOf": [
              {
                "$ref": "#/components/schemas/flowDetails"
              }
            ]
          },
          "polling": {
            "description": "Polling configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/PollingInfo"
              }
            ]
          },
          "providerInfo": {
            "description": "Provider information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderInfo"
              }
            ]
          },
          "redirectBehavior": {
            "description": "Redirect behavior configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectBehavior"
              }
            ]
          },
          "userConfirmation": {
            "description": "User confirmation status",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserConfirmation"
              }
            ]
          },
          "expiresAt": {
            "type": "string",
            "description": "Expiration timestamp"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp"
          },
          "links": {
            "type": "string",
            "description": "Related links"
          }
        },
        "required": [
          "verificationId",
          "status",
          "eid",
          "expiresAt",
          "createdAt",
          "links"
        ]
      },
      "VerifiedAttributes": {
        "type": "object",
        "properties": {
          "given_name": {
            "type": "string",
            "description": "Given name"
          },
          "family_name": {
            "type": "string",
            "description": "Family name"
          },
          "birthdate": {
            "type": "string",
            "description": "Birthdate"
          }
        }
      },
      "ErrorInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Error type"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          },
          "occurredAt": {
            "type": "string",
            "description": "Timestamp when error occurred"
          },
          "providerError": {
            "type": "object",
            "description": "Provider-specific error information"
          }
        },
        "required": [
          "type",
          "code",
          "message"
        ]
      },
      "GetVerificationResponseDto": {
        "type": "object",
        "properties": {
          "verificationId": {
            "type": "string",
            "description": "Verification ID"
          },
          "status": {
            "type": "string",
            "description": "Current status",
            "enum": [
              "initiated",
              "pending",
              "authenticating",
              "processing",
              "completed",
              "failed",
              "expired",
              "cancelled"
            ]
          },
          "eid": {
            "type": "string",
            "description": "Provider name"
          },
          "flow": {
            "type": "string",
            "description": "Verification flow",
            "enum": [
              "push",
              "qr",
              "redirect"
            ]
          },
          "loaAchieved": {
            "type": "string",
            "description": "Achieved LoA",
            "enum": [
              "1",
              "2",
              "3",
              "4"
            ]
          },
          "flowDetails": {
            "description": "Initiation details",
            "allOf": [
              {
                "$ref": "#/components/schemas/flowDetails"
              }
            ]
          },
          "verifiedAt": {
            "type": "string",
            "description": "Verification timestamp"
          },
          "failedAt": {
            "type": "string",
            "description": "Failure timestamp"
          },
          "cancelledAt": {
            "type": "string",
            "description": "Cancellation timestamp"
          },
          "expiresAt": {
            "type": "string",
            "description": "Expiration timestamp"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp"
          },
          "verifiedAttributes": {
            "description": "Verified attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/VerifiedAttributes"
              }
            ]
          },
          "referenceId": {
            "type": "string",
            "description": "Reference ID"
          },
          "error": {
            "description": "Error information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorInfo"
              }
            ]
          },
          "links": {
            "type": "string",
            "description": "Related links"
          }
        },
        "required": [
          "verificationId",
          "status",
          "eid",
          "links"
        ]
      }
    }
  }
}